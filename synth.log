
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.35+24 (git sha1 032fab1f5, clang 15.0.7 -fPIC -Os)

1. Executing Liberty frontend: /opt/riscv/cad/lib/sky130_osu_sc_t12/12T_hs/lib/sky130_osu_sc_12T_hs_tt_1P20_25C.ccs.lib
Imported 55 cell types from liberty file.

2. Executing Verilog-2005 frontend: ./src/2to4decoder.sv
Parsing SystemVerilog input from `./src/2to4decoder.sv' to AST representation.
Generating RTLIL representation for module `\decoder'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./src/flop.sv
Parsing SystemVerilog input from `./src/flop.sv' to AST representation.
Generating RTLIL representation for module `\flop'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: ./src/flopenr.sv
Parsing SystemVerilog input from `./src/flopenr.sv' to AST representation.
Generating RTLIL representation for module `\flopenr'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: ./src/keypadFSM.sv
Parsing SystemVerilog input from `./src/keypadFSM.sv' to AST representation.
Generating RTLIL representation for module `\keypadFSM'.
./src/keypadFSM.sv:30: Warning: Identifier `\rowEnable' is implicitly declared.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: ./src/lab3_top.sv
Parsing SystemVerilog input from `./src/lab3_top.sv' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: ./src/mux2.sv
Parsing SystemVerilog input from `./src/mux2.sv' to AST representation.
Generating RTLIL representation for module `\mux2'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: ./src/outputController.sv
Parsing SystemVerilog input from `./src/outputController.sv' to AST representation.
Generating RTLIL representation for module `\outputController'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: ./src/outputSelector.sv
Parsing SystemVerilog input from `./src/outputSelector.sv' to AST representation.
Generating RTLIL representation for module `\outputSelector'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: ./src/rowColToHex.sv
Parsing SystemVerilog input from `./src/rowColToHex.sv' to AST representation.
Generating RTLIL representation for module `\rowColToHex'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: ./src/rowSelect.sv
Parsing SystemVerilog input from `./src/rowSelect.sv' to AST representation.
Generating RTLIL representation for module `\rowSelect'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: ./src/sevenSegmentController.sv
Parsing SystemVerilog input from `./src/sevenSegmentController.sv' to AST representation.
Generating RTLIL representation for module `\sevenSegmentController'.
Successfully finished Verilog frontend.

13. Executing HIERARCHY pass (managing design hierarchy).

13.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \outputController
Used module:         \sevenSegmentController
Used module:         \mux2
Used module:         \outputSelector
Used module:             \flopenr
Used module:             \flop
Used module:     \keypadFSM
Used module:         \rowColToHex
Used module:     \decoder
Used module:     \rowSelect
Parameter 1 (\WIDTH) = 4

13.2. Executing AST frontend in derive mode using pre-parsed AST for module `\flopenr'.
Parameter 1 (\WIDTH) = 4
Generating RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\delayCycles) = 1

13.3. Executing AST frontend in derive mode using pre-parsed AST for module `\keypadFSM'.
Parameter 1 (\delayCycles) = 1
Generating RTLIL representation for module `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001'.
./src/keypadFSM.sv:30: Warning: Identifier `\rowEnable' is implicitly declared.
Parameter 1 (\WIDTH) = 8

13.4. Executing AST frontend in derive mode using pre-parsed AST for module `\flop'.
Parameter 1 (\WIDTH) = 8
Generating RTLIL representation for module `$paramod\flop\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 8
Found cached RTLIL representation for module `$paramod\flop\WIDTH=s32'00000000000000000000000000001000'.
Parameter 1 (\WIDTH) = 4

13.5. Executing AST frontend in derive mode using pre-parsed AST for module `\mux2'.
Parameter 1 (\WIDTH) = 4
Generating RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 1

13.6. Executing AST frontend in derive mode using pre-parsed AST for module `\flopenr'.
Parameter 1 (\WIDTH) = 1
Generating RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 2

13.7. Executing AST frontend in derive mode using pre-parsed AST for module `\flopenr'.
Parameter 1 (\WIDTH) = 2
Generating RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010'.
Parameter 1 (\WIDTH) = 16

13.8. Executing AST frontend in derive mode using pre-parsed AST for module `\flop'.
Parameter 1 (\WIDTH) = 16
Generating RTLIL representation for module `$paramod\flop\WIDTH=s32'00000000000000000000000000010000'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\mux2\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 1
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001'.
Parameter 1 (\WIDTH) = 19

13.9. Executing AST frontend in derive mode using pre-parsed AST for module `\flop'.
Parameter 1 (\WIDTH) = 19
Generating RTLIL representation for module `$paramod\flop\WIDTH=s32'00000000000000000000000000010011'.

13.10. Analyzing design hierarchy..
Top module:  \top
Used module:     \outputController
Used module:         \sevenSegmentController
Used module:         $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:         \outputSelector
Used module:             $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001
Used module:             $paramod\flop\WIDTH=s32'00000000000000000000000000010011
Used module:     $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001
Used module:         \rowColToHex
Used module:         \flopenr
Used module:     $paramod\flop\WIDTH=s32'00000000000000000000000000001000
Used module:     \decoder
Used module:     \rowSelect
Used module:         $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:         $paramod\flop\WIDTH=s32'00000000000000000000000000010000
Parameter 1 (\WIDTH) = 1
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.
Parameter 1 (\WIDTH) = 4
Found cached RTLIL representation for module `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100'.

13.11. Analyzing design hierarchy..
Top module:  \top
Used module:     \outputController
Used module:         \sevenSegmentController
Used module:         $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:         \outputSelector
Used module:             $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001
Used module:             $paramod\flop\WIDTH=s32'00000000000000000000000000010011
Used module:     $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001
Used module:         \rowColToHex
Used module:     $paramod\flop\WIDTH=s32'00000000000000000000000000001000
Used module:     \decoder
Used module:     \rowSelect
Used module:         $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:         $paramod\flop\WIDTH=s32'00000000000000000000000000010000

13.12. Analyzing design hierarchy..
Top module:  \top
Used module:     \outputController
Used module:         \sevenSegmentController
Used module:         $paramod\mux2\WIDTH=s32'00000000000000000000000000000100
Used module:         \outputSelector
Used module:             $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001
Used module:             $paramod\flop\WIDTH=s32'00000000000000000000000000010011
Used module:     $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100
Used module:     $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001
Used module:         \rowColToHex
Used module:     $paramod\flop\WIDTH=s32'00000000000000000000000000001000
Used module:     \decoder
Used module:     \rowSelect
Used module:         $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010
Used module:         $paramod\flop\WIDTH=s32'00000000000000000000000000010000
Removing unused module `\mux2'.
Removing unused module `\keypadFSM'.
Removing unused module `\flopenr'.
Removing unused module `\flop'.
Removing unused module `\sky130_osu_sc_12T_hs__xor2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__xnor2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__tnbufi_l'.
Removing unused module `\sky130_osu_sc_12T_hs__tnbufi_1'.
Removing unused module `\sky130_osu_sc_12T_hs__tielo'.
Removing unused module `\sky130_osu_sc_12T_hs__tiehi'.
Removing unused module `\sky130_osu_sc_12T_hs__tbufi_l'.
Removing unused module `\sky130_osu_sc_12T_hs__tbufi_1'.
Removing unused module `\sky130_osu_sc_12T_hs__or2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__or2_8'.
Removing unused module `\sky130_osu_sc_12T_hs__or2_4'.
Removing unused module `\sky130_osu_sc_12T_hs__or2_2'.
Removing unused module `\sky130_osu_sc_12T_hs__or2_1'.
Removing unused module `\sky130_osu_sc_12T_hs__oai22_l'.
Removing unused module `\sky130_osu_sc_12T_hs__oai21_l'.
Removing unused module `\sky130_osu_sc_12T_hs__nor2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__nor2_1'.
Removing unused module `\sky130_osu_sc_12T_hs__nand2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__nand2_1'.
Removing unused module `\sky130_osu_sc_12T_hs__mux2_1'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_l'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_8'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_6'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_4'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_3'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_2'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_10'.
Removing unused module `\sky130_osu_sc_12T_hs__inv_1'.
Removing unused module `\sky130_osu_sc_12T_hs__dffsr_l'.
Removing unused module `\sky130_osu_sc_12T_hs__dffsr_1'.
Removing unused module `\sky130_osu_sc_12T_hs__dffs_l'.
Removing unused module `\sky130_osu_sc_12T_hs__dffs_1'.
Removing unused module `\sky130_osu_sc_12T_hs__dffr_l'.
Removing unused module `\sky130_osu_sc_12T_hs__dffr_1'.
Removing unused module `\sky130_osu_sc_12T_hs__dff_l'.
Removing unused module `\sky130_osu_sc_12T_hs__dff_1'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_l'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_8'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_6'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_4'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_2'.
Removing unused module `\sky130_osu_sc_12T_hs__buf_1'.
Removing unused module `\sky130_osu_sc_12T_hs__aoi22_l'.
Removing unused module `\sky130_osu_sc_12T_hs__aoi21_l'.
Removing unused module `\sky130_osu_sc_12T_hs__ant'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_l'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_8'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_6'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_4'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_2'.
Removing unused module `\sky130_osu_sc_12T_hs__and2_1'.
Removing unused module `\sky130_osu_sc_12T_hs__addh_l'.
Removing unused module `\sky130_osu_sc_12T_hs__addh_1'.
Removing unused module `\sky130_osu_sc_12T_hs__addf_l'.
Removing unused module `\sky130_osu_sc_12T_hs__addf_1'.
Removed 59 unused modules.
Mapping positional arguments of cell top.syncFlop ($paramod\flop\WIDTH=s32'00000000000000000000000000001000).
Mapping positional arguments of cell top.captureFlop ($paramod\flop\WIDTH=s32'00000000000000000000000000001000).
Mapping positional arguments of cell top.rowLockMux ($paramod\mux2\WIDTH=s32'00000000000000000000000000000100).
Mapping positional arguments of cell $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.rowColAssignment (rowColToHex).
Mapping positional arguments of cell $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.delayFlop ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000001).
Mapping positional arguments of cell $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.colLockFlop ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000100).
Mapping positional arguments of cell $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.rowLockFlop ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000100).
Mapping positional arguments of cell rowSelect.counterFlop ($paramod\flop\WIDTH=s32'00000000000000000000000000010000).
Mapping positional arguments of cell outputSelector.ioSelectFlop ($paramod\flopenr\WIDTH=s32'00000000000000000000000000000001).
Mapping positional arguments of cell outputSelector.counterFlop ($paramod\flop\WIDTH=s32'00000000000000000000000000010011).
Mapping positional arguments of cell outputController.outputSelectModule (outputSelector).

14. Executing PROC pass (convert processes to netlists).

14.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

14.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./src/flop.sv:16$442 in module $paramod\flop\WIDTH=s32'00000000000000000000000000010000.
Marked 1 switch rules as full_case in process $proc$./src/flopenr.sv:16$441 in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$./src/flopenr.sv:16$440 in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.
Removed 1 dead cases from process $proc$./src/2to4decoder.sv:0$359 in module decoder.
Marked 1 switch rules as full_case in process $proc$./src/2to4decoder.sv:0$359 in module decoder.
Marked 1 switch rules as full_case in process $proc$./src/flop.sv:16$438 in module $paramod\flop\WIDTH=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$./src/keypadFSM.sv:63$433 in module $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.
Removed 1 dead cases from process $proc$./src/keypadFSM.sv:0$425 in module $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.
Marked 5 switch rules as full_case in process $proc$./src/keypadFSM.sv:0$425 in module $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.
Marked 1 switch rules as full_case in process $proc$./src/flopenr.sv:16$407 in module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.
Removed 1 dead cases from process $proc$./src/sevenSegmentController.sv:0$405 in module sevenSegmentController.
Marked 1 switch rules as full_case in process $proc$./src/sevenSegmentController.sv:0$405 in module sevenSegmentController.
Marked 1 switch rules as full_case in process $proc$./src/rowColToHex.sv:0$400 in module rowColToHex.
Marked 1 switch rules as full_case in process $proc$./src/flop.sv:16$443 in module $paramod\flop\WIDTH=s32'00000000000000000000000000010011.
Removed a total of 3 dead cases.

14.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 2 assignments to connections.

14.4. Executing PROC_INIT pass (extract init attributes).

14.5. Executing PROC_ARST pass (detect async resets in processes).

14.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~18 debug messages>

14.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\flop\WIDTH=s32'00000000000000000000000000010000.$proc$./src/flop.sv:16$442'.
     1/1: $0\q[15:0]
Creating decoders for process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$./src/flopenr.sv:16$441'.
     1/1: $0\q[1:0]
Creating decoders for process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.$proc$./src/flopenr.sv:16$440'.
     1/1: $0\q[0:0]
Creating decoders for process `\decoder.$proc$./src/2to4decoder.sv:0$359'.
     1/1: $0\decoded[3:0]
Creating decoders for process `$paramod\flop\WIDTH=s32'00000000000000000000000000001000.$proc$./src/flop.sv:16$438'.
     1/1: $0\q[7:0]
Creating decoders for process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:63$433'.
     1/1: $0\currentState[1:0]
Creating decoders for process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:0$425'.
     1/5: $5\nextState[1:0]
     2/5: $4\nextState[1:0]
     3/5: $3\nextState[1:0]
     4/5: $2\nextState[1:0]
     5/5: $1\nextState[1:0]
Creating decoders for process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.$proc$./src/flopenr.sv:16$407'.
     1/1: $0\q[3:0]
Creating decoders for process `\sevenSegmentController.$proc$./src/sevenSegmentController.sv:0$405'.
     1/1: $0\segmentBar[6:0]
Creating decoders for process `\rowColToHex.$proc$./src/rowColToHex.sv:0$400'.
     1/1: $1\hexInput[3:0]
Creating decoders for process `$paramod\flop\WIDTH=s32'00000000000000000000000000010011.$proc$./src/flop.sv:16$443'.
     1/1: $0\q[18:0]

14.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\decoder.\decoded' from process `\decoder.$proc$./src/2to4decoder.sv:0$359'.
No latch inferred for signal `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.\nextState' from process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:0$425'.
No latch inferred for signal `\sevenSegmentController.\segmentBar' from process `\sevenSegmentController.$proc$./src/sevenSegmentController.sv:0$405'.
No latch inferred for signal `\rowColToHex.\hexInput' from process `\rowColToHex.$proc$./src/rowColToHex.sv:0$400'.

14.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\flop\WIDTH=s32'00000000000000000000000000010000.\q' using process `$paramod\flop\WIDTH=s32'00000000000000000000000000010000.$proc$./src/flop.sv:16$442'.
  created $dff cell `$procdff$536' with positive edge clock.
Creating register for signal `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.\q' using process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$./src/flopenr.sv:16$441'.
  created $dff cell `$procdff$537' with positive edge clock.
Creating register for signal `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.\q' using process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.$proc$./src/flopenr.sv:16$440'.
  created $dff cell `$procdff$538' with positive edge clock.
Creating register for signal `$paramod\flop\WIDTH=s32'00000000000000000000000000001000.\q' using process `$paramod\flop\WIDTH=s32'00000000000000000000000000001000.$proc$./src/flop.sv:16$438'.
  created $dff cell `$procdff$539' with positive edge clock.
Creating register for signal `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.\currentState' using process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:63$433'.
  created $dff cell `$procdff$540' with positive edge clock.
Creating register for signal `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.\q' using process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.$proc$./src/flopenr.sv:16$407'.
  created $dff cell `$procdff$541' with positive edge clock.
Creating register for signal `$paramod\flop\WIDTH=s32'00000000000000000000000000010011.\q' using process `$paramod\flop\WIDTH=s32'00000000000000000000000000010011.$proc$./src/flop.sv:16$443'.
  created $dff cell `$procdff$542' with positive edge clock.

14.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

14.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\flop\WIDTH=s32'00000000000000000000000000010000.$proc$./src/flop.sv:16$442'.
Removing empty process `$paramod\flop\WIDTH=s32'00000000000000000000000000010000.$proc$./src/flop.sv:16$442'.
Found and cleaned up 2 empty switches in `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$./src/flopenr.sv:16$441'.
Removing empty process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.$proc$./src/flopenr.sv:16$441'.
Found and cleaned up 2 empty switches in `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.$proc$./src/flopenr.sv:16$440'.
Removing empty process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.$proc$./src/flopenr.sv:16$440'.
Found and cleaned up 1 empty switch in `\decoder.$proc$./src/2to4decoder.sv:0$359'.
Removing empty process `decoder.$proc$./src/2to4decoder.sv:0$359'.
Found and cleaned up 1 empty switch in `$paramod\flop\WIDTH=s32'00000000000000000000000000001000.$proc$./src/flop.sv:16$438'.
Removing empty process `$paramod\flop\WIDTH=s32'00000000000000000000000000001000.$proc$./src/flop.sv:16$438'.
Found and cleaned up 2 empty switches in `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:63$433'.
Removing empty process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:63$433'.
Found and cleaned up 5 empty switches in `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:0$425'.
Removing empty process `$paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.$proc$./src/keypadFSM.sv:0$425'.
Found and cleaned up 2 empty switches in `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.$proc$./src/flopenr.sv:16$407'.
Removing empty process `$paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.$proc$./src/flopenr.sv:16$407'.
Found and cleaned up 1 empty switch in `\sevenSegmentController.$proc$./src/sevenSegmentController.sv:0$405'.
Removing empty process `sevenSegmentController.$proc$./src/sevenSegmentController.sv:0$405'.
Found and cleaned up 1 empty switch in `\rowColToHex.$proc$./src/rowColToHex.sv:0$400'.
Removing empty process `rowColToHex.$proc$./src/rowColToHex.sv:0$400'.
Found and cleaned up 1 empty switch in `$paramod\flop\WIDTH=s32'00000000000000000000000000010011.$proc$./src/flop.sv:16$443'.
Removing empty process `$paramod\flop\WIDTH=s32'00000000000000000000000000010011.$proc$./src/flop.sv:16$443'.
Cleaned up 19 empty switches.

14.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module $paramod\flop\WIDTH=s32'00000000000000000000000000010000.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod\flop\WIDTH=s32'00000000000000000000000000001000.
Optimizing module $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.
<suppressed ~7 debug messages>
Optimizing module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.
Optimizing module sevenSegmentController.
Optimizing module rowSelect.
Optimizing module rowColToHex.
Optimizing module outputSelector.
Optimizing module outputController.
Optimizing module $paramod\flop\WIDTH=s32'00000000000000000000000000010011.

15. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod\flop\WIDTH=s32'00000000000000000000000000010000.
Deleting now unused module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000010.
Deleting now unused module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000001.
Deleting now unused module decoder.
Deleting now unused module $paramod\mux2\WIDTH=s32'00000000000000000000000000000100.
Deleting now unused module $paramod\flop\WIDTH=s32'00000000000000000000000000001000.
Deleting now unused module $paramod\keypadFSM\delayCycles=s32'00000000000000000000000000000001.
Deleting now unused module $paramod\flopenr\WIDTH=s32'00000000000000000000000000000100.
Deleting now unused module sevenSegmentController.
Deleting now unused module rowSelect.
Deleting now unused module rowColToHex.
Deleting now unused module outputSelector.
Deleting now unused module outputController.
Deleting now unused module $paramod\flop\WIDTH=s32'00000000000000000000000000010011.
<suppressed ~20 debug messages>

16. Executing MEMORY pass.

16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\outputControl.\segmentControl.$auto$proc_rom.cc:150:do_switch$445'[0] in module `\top': no output FF found.
Checking read port address `$flatten\outputControl.\segmentControl.$auto$proc_rom.cc:150:do_switch$445'[0] in module `\top': no address FF found.

16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 79 unused wires.
<suppressed ~5 debug messages>

16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

16.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\outputControl.\segmentControl.$auto$proc_rom.cc:150:do_switch$445 in module \top:
  created 16 $dff cells and 0 static cells of width 7.
  read interface: 0 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.

17. Executing OPT pass (performing simple optimizations).

17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~13 debug messages>

17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\keypadScanner.$procmux$478.
    dead port 1/2 on $mux $flatten\keypadScanner.$procmux$486.
    dead port 2/2 on $mux $flatten\keypadScanner.$procmux$488.
    dead port 2/2 on $mux $flatten\keypadScanner.$procmux$495.
    dead port 2/2 on $mux $flatten\keypadScanner.$procmux$503.
Removed 5 multiplexer ports.
<suppressed ~14 debug messages>

17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

17.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\rowSelector.\counterFlop.$procdff$536 ($dff) from module top (D = \rowSelector.counterFlop.d, Q = \rowSelector.counterFlop.q, rval = 16'0000000000000000).
Adding SRST signal on $flatten\outputControl.\outputSelectModule.\counterFlop.$procdff$542 ($dff) from module top (D = \outputControl.outputSelectModule.counterFlop.d, Q = \outputControl.outputSelectModule.counterFlop.q, rval = 19'0000000000000000000).
Adding SRST signal on $flatten\keypadScanner.\delayFlop.$procdff$538 ($dff) from module top (D = $flatten\keypadScanner.\delayFlop.$procmux$456_Y, Q = \keypadScanner.delayFlop.q, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$592 ($sdff) from module top (D = \keypadScanner.delayFlop.d, Q = \keypadScanner.delayFlop.q).

17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 44 unused wires.
<suppressed ~5 debug messages>

17.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

17.9. Rerunning OPT passes. (Maybe there is more to do..)

17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

17.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\rowSelector.\rowCounterFlop.$procdff$537 ($dff) from module top (D = \rowSelector.rowCounterFlop.d, Q = \rowSelector.rowCounterFlop.q).
Adding EN signal on $flatten\outputControl.\outputSelectModule.\ioSelectFlop.$procdff$538 ($dff) from module top (D = \outputSel1, Q = \outputControl.outputSelectModule.ioSelectFlop.q).
Adding EN signal on $flatten\keypadScanner.\rowLockFlop.$procdff$541 ($dff) from module top (D = \syncFlop.q [7:4], Q = \keypadScanner.rowLockFlop.q).
Adding EN signal on $flatten\keypadScanner.\colLockFlop.$procdff$541 ($dff) from module top (D = \syncFlop.q [3:0], Q = \keypadScanner.colLockFlop.q).
Adding EN signal on $flatten\keypadScanner.$procdff$540 ($dff) from module top (D = \keypadScanner.nextState, Q = \keypadScanner.currentState).
Adding EN signal on $flatten\hexInput1Flop.$procdff$541 ($dff) from module top (D = \hexInput0Flop.q, Q = \hexInput1Flop.q).
Adding EN signal on $flatten\hexInput0Flop.$procdff$541 ($dff) from module top (D = \hexInput0Flop.d, Q = \hexInput0Flop.q).

17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 7 unused cells and 7 unused wires.
<suppressed ~8 debug messages>

17.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

17.16. Rerunning OPT passes. (Maybe there is more to do..)

17.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

17.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

17.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

17.20. Executing OPT_DFF pass (perform DFF optimizations).

17.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

17.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

17.23. Finished OPT passes. (There is nothing left to do.)

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=16:B_SIGNED=0:B_WIDTH=16:Y_WIDTH=16:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=2:B_SIGNED=0:B_WIDTH=2:Y_WIDTH=2:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$20d3ee62d72123142eb855d7ddafd835e31ba009\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$5d37c9676d77ab033e85de89a3261885cba80ce3\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$068ad458e7761d78e5eed8238508872e7b0aef95\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=1:B_SIGNED=0:B_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_bool.
Running "alumacc" on wrapper $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$add:A_SIGNED=0:A_WIDTH=19:B_SIGNED=0:B_WIDTH=19:Y_WIDTH=19:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$7e708ae28ab761f11d0fb59d3ffc72f6a4baf5d9\_90_alu for cells of type $alu.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_90_alu for cells of type $alu.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010011 for cells of type $lcu.
No more expansions possible.
<suppressed ~1186 debug messages>

19. Executing SYNTH pass.

19.1. Executing HIERARCHY pass (managing design hierarchy).

19.1.1. Analyzing design hierarchy..
Top module:  \top

19.1.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

19.2. Executing PROC pass (convert processes to netlists).

19.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

19.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

19.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

19.2.4. Executing PROC_INIT pass (extract init attributes).

19.2.5. Executing PROC_ARST pass (detect async resets in processes).

19.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

19.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

19.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

19.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

19.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

19.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

19.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~874 debug messages>

19.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 44 unused cells and 477 unused wires.
<suppressed ~49 debug messages>

19.5. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

19.6. Executing OPT pass (performing simple optimizations).

19.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~303 debug messages>
Removed a total of 101 cells.

19.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6.6. Executing OPT_DFF pass (perform DFF optimizations).

19.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 49 unused wires.
<suppressed ~1 debug messages>

19.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

19.6.9. Rerunning OPT passes. (Maybe there is more to do..)

19.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6.13. Executing OPT_DFF pass (perform DFF optimizations).

19.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

19.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.6.16. Rerunning OPT passes. (Maybe there is more to do..)

19.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.6.20. Executing OPT_DFF pass (perform DFF optimizations).

19.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.6.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.6.23. Finished OPT passes. (There is nothing left to do.)

19.7. Executing FSM pass (extract and optimize FSM).

19.7.1. Executing FSM_DETECT pass (finding FSMs in design).

19.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

19.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

19.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

19.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

19.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

19.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

19.8. Executing OPT pass (performing simple optimizations).

19.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1345 ($_DFFE_PP_) from module top (D = $flatten\keypadScanner.\rowColAssignment.$procmux$517.Y_B [3], Q = \hexInput0Flop.q [3], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1344 ($_DFFE_PP_) from module top (D = $flatten\keypadScanner.\rowColAssignment.$procmux$517.Y_B [2], Q = \hexInput0Flop.q [2], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1343 ($_DFFE_PP_) from module top (D = $flatten\keypadScanner.\rowColAssignment.$procmux$517.Y_B [1], Q = \hexInput0Flop.q [1], rval = 1'0).
Adding SRST signal on $auto$ff.cc:266:slice$1342 ($_DFFE_PP_) from module top (D = $flatten\keypadScanner.\rowColAssignment.$procmux$517.Y_B [0], Q = \hexInput0Flop.q [0], rval = 1'0).

19.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 4 unused cells and 0 unused wires.
<suppressed ~4 debug messages>

19.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.8.9. Rerunning OPT passes. (Maybe there is more to do..)

19.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.8.13. Executing OPT_DFF pass (perform DFF optimizations).

19.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.8.16. Finished OPT passes. (There is nothing left to do.)

19.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from wire top.$flatten\keypadScanner.$4\nextState[1:0].

19.10. Executing PEEPOPT pass (run peephole optimizers).

19.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

19.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

19.13. Executing SHARE pass (SAT-based resource sharing).

19.14. Executing OPT pass (performing simple optimizations).

19.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.14.6. Executing OPT_DFF pass (perform DFF optimizations).

19.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.14.9. Finished OPT passes. (There is nothing left to do.)

19.15. Executing MEMORY pass.

19.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

19.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

19.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

19.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

19.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

19.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

19.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

19.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.17. Executing OPT pass (performing simple optimizations).

19.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~18 debug messages>

19.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.17.3. Executing OPT_DFF pass (perform DFF optimizations).

19.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 6 unused cells and 6 unused wires.
<suppressed ~7 debug messages>

19.17.5. Finished fast OPT passes.

19.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

19.19. Executing OPT pass (performing simple optimizations).

19.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

19.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

19.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.19.6. Executing OPT_SHARE pass.

19.19.7. Executing OPT_DFF pass (perform DFF optimizations).

19.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.19.10. Finished OPT passes. (There is nothing left to do.)

19.20. Executing TECHMAP pass (map to technology primitives).

19.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

19.20.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

19.21. Executing OPT pass (performing simple optimizations).

19.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

19.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

19.21.3. Executing OPT_DFF pass (perform DFF optimizations).

19.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

19.21.5. Finished fast OPT passes.

19.22. Executing ABC pass (technology mapping using ABC).

19.22.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 346 gates and 417 wires to a netlist network with 69 inputs and 75 outputs.

19.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

19.22.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       14
ABC RESULTS:              NAND cells:       21
ABC RESULTS:               AND cells:       17
ABC RESULTS:               XOR cells:       20
ABC RESULTS:             ORNOT cells:       15
ABC RESULTS:               NOT cells:       35
ABC RESULTS:               MUX cells:       19
ABC RESULTS:               NOR cells:       15
ABC RESULTS:            ANDNOT cells:       57
ABC RESULTS:                OR cells:       93
ABC RESULTS:        internal signals:      273
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       75
Removing temp directory.

19.23. Executing OPT pass (performing simple optimizations).

19.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~5 debug messages>

19.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

19.23.3. Executing OPT_DFF pass (perform DFF optimizations).

19.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 2 unused cells and 288 unused wires.
<suppressed ~14 debug messages>

19.23.5. Finished fast OPT passes.

19.24. Executing HIERARCHY pass (managing design hierarchy).

19.24.1. Analyzing design hierarchy..
Top module:  \top

19.24.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

19.25. Printing statistics.

=== top ===

   Number of wires:                355
   Number of wire bits:            676
   Number of public wires:         123
   Number of public wire bits:     441
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                374
     $_ANDNOT_                      57
     $_AND_                         17
     $_DFFE_PN_                      5
     $_DFFE_PP_                     12
     $_DFF_P_                       16
     $_MUX_                         19
     $_NAND_                        19
     $_NOR_                         15
     $_NOT_                         33
     $_ORNOT_                       14
     $_OR_                          93
     $_SDFFCE_PN0P_                  4
     $_SDFFE_PN0N_                   1
     $_SDFF_PN0_                    35
     $_XNOR_                        14
     $_XOR_                         20

19.26. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_osu_sc_12T_hs__dff_l (noninv, pins=3, area=32.23) is a direct match for cell type $_DFF_P_.
  cell sky130_osu_sc_12T_hs__dffr_l (noninv, pins=5, area=42.49) is a direct match for cell type $_DFF_PN0_.
  cell sky130_osu_sc_12T_hs__dffs_l (noninv, pins=5, area=38.58) is a direct match for cell type $_DFF_PN1_.
  cell sky130_osu_sc_12T_hs__dffsr_l (noninv, pins=6, area=46.40) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_osu_sc_12T_hs__dff_l _DFF_P_ (.CK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_osu_sc_12T_hs__dffr_l _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    \sky130_osu_sc_12T_hs__dffs_l _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \sky130_osu_sc_12T_hs__dffsr_l _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\top':
  mapped 73 $_DFF_P_ cells to \sky130_osu_sc_12T_hs__dff_l cells.

21. Executing ABC pass (technology mapping using ABC).

21.1. Summary of detected clock domains:
  436 cells in clk={ }, en={ }, arst={ }, srst={ }

21.2. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 363 gates and 433 wires to a netlist network with 69 inputs and 80 outputs.

21.2.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /opt/riscv/cad/lib/sky130_osu_sc_t12/12T_hs/lib/sky130_osu_sc_12T_hs_tt_1P20_25C.ccs.lib 
ABC: Parsing finished successfully.  Parsing time =     0.43 sec
ABC: Scl_LibertyReadGenlib() skipped cell "sky130_osu_sc_12T_hs__ant" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dff_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dff_l".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffr_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffr_l".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffs_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffs_l".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffsr_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_osu_sc_12T_hs__dffsr_l".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_osu_sc_12T_hs__tbufi_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_osu_sc_12T_hs__tbufi_l".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_osu_sc_12T_hs__tnbufi_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_osu_sc_12T_hs__tnbufi_l".
ABC: Library "sky130_osu_sc_12T_hs_tt_1P20_25C.ccs" from "/opt/riscv/cad/lib/sky130_osu_sc_t12/12T_hs/lib/sky130_osu_sc_12T_hs_tt_1P20_25C.ccs.lib" has 42 cells (13 skipped: 8 seq; 4 tri-state; 1 no func; 0 dont_use).  Time =     0.44 sec
ABC: Memory =   27.98 MB. Time =     0.44 sec
ABC: Gates with more than 2 outputs are not supported.
ABC: Gates with more than 2 outputs are not supported.
ABC: Gates with more than 2 outputs are not supported.
ABC: Gates with more than 2 outputs are not supported.
ABC: Warning: Detected 8 multi-output gates (for example, "sky130_osu_sc_12T_hs__addf_1").
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime -o -D 1000 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf -D 1000 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

21.2.2. Re-integrating ABC results.
ABC RESULTS:   sky130_osu_sc_12T_hs__xor2_l cells:       11
ABC RESULTS:   sky130_osu_sc_12T_hs__mux2_1 cells:       21
ABC RESULTS:   sky130_osu_sc_12T_hs__or2_1 cells:        9
ABC RESULTS:   sky130_osu_sc_12T_hs__oai22_l cells:        2
ABC RESULTS:   sky130_osu_sc_12T_hs__and2_1 cells:       33
ABC RESULTS:   sky130_osu_sc_12T_hs__xnor2_l cells:       15
ABC RESULTS:   sky130_osu_sc_12T_hs__aoi21_l cells:       14
ABC RESULTS:   sky130_osu_sc_12T_hs__aoi22_l cells:        3
ABC RESULTS:   sky130_osu_sc_12T_hs__nand2_1 cells:       37
ABC RESULTS:   sky130_osu_sc_12T_hs__nor2_1 cells:       68
ABC RESULTS:   sky130_osu_sc_12T_hs__oai21_l cells:       15
ABC RESULTS:   sky130_osu_sc_12T_hs__inv_l cells:       28
ABC RESULTS:        internal signals:      284
ABC RESULTS:           input signals:       69
ABC RESULTS:          output signals:       80
Removing temp directory.
Removed 0 unused cells and 403 unused wires.

22. Executing Verilog backend.

22.1. Executing BMUXMAP pass.

22.2. Executing DEMUXMAP pass.
Dumping module `\top'.

Warnings: 1 unique messages, 2 total
End of script. Logfile hash: d36e6575ef, CPU: user 2.77s system 0.05s, MEM: 50.04 MB peak
Yosys 0.35+24 (git sha1 032fab1f5, clang 15.0.7 -fPIC -Os)
Time spent: 30% 2x read_liberty (1 sec), 27% 2x abc (1 sec), ...
